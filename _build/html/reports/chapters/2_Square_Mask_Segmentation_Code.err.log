Traceback (most recent call last):
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/Y/miniconda3/envs/docs/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import os
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# Function to apply square mask on an image
def apply_square_mask(image_path, output_directory, square_corners):
    # Read the image
    image = Image.open(image_path)
    image_array = np.array(image)
    
    # Create an empty mask of the same size as the image
    mask = np.zeros(image_array.shape[:2], dtype=np.uint8)
    
    # Fill the square region in the mask
    x1, y1 = square_corners[0]
    x2, y2 = square_corners[2]
    mask[y1:y2, x1:x2] = 1
    
    # Check if the image is grayscale or color
    if len(image_array.shape) == 2:
        segmented_image_array = image_array * mask
    else:
        segmented_image_array = image_array * np.expand_dims(mask, axis=2)
    
    # Convert the segmented image array back to an image
    segmented_image = Image.fromarray(np.uint8(segmented_image_array))
    
    # Save the segmented image in the output directory
    output_path = os.path.join(output_directory, os.path.basename(image_path))
    segmented_image.save(output_path)

# Define the input and output directories
input_directory = './data/philipsepiq7g_c5-1/0all/frames'
output_directory = './data/philipsepiq7g_c5-1/0all/segmented_frames'

# Create the output directory if it doesn't exist
os.makedirs(output_directory, exist_ok=True)

# Define the square corners
square_corners = [(227, 173), (564, 173), (564, 510), (227, 510)]

# Iterate through all JPEG files in the directory and apply the mask
for file_name in os.listdir(input_directory):
    if file_name.lower().endswith('.jpeg'):
        file_path = os.path.join(input_directory, file_name)
        apply_square_mask(file_path, output_directory, square_corners)

print(f'Segmented images have been saved in {output_directory}')
print("Hi")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[1], line 44[0m
[1;32m     41[0m square_corners [38;5;241m=[39m [([38;5;241m227[39m, [38;5;241m173[39m), ([38;5;241m564[39m, [38;5;241m173[39m), ([38;5;241m564[39m, [38;5;241m510[39m), ([38;5;241m227[39m, [38;5;241m510[39m)]
[1;32m     43[0m [38;5;66;03m# Iterate through all JPEG files in the directory and apply the mask[39;00m
[0;32m---> 44[0m [38;5;28;01mfor[39;00m file_name [38;5;129;01min[39;00m [43mos[49m[38;5;241;43m.[39;49m[43mlistdir[49m[43m([49m[43minput_directory[49m[43m)[49m:
[1;32m     45[0m     [38;5;28;01mif[39;00m file_name[38;5;241m.[39mlower()[38;5;241m.[39mendswith([38;5;124m'[39m[38;5;124m.jpeg[39m[38;5;124m'[39m):
[1;32m     46[0m         file_path [38;5;241m=[39m os[38;5;241m.[39mpath[38;5;241m.[39mjoin(input_directory, file_name)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: './data/philipsepiq7g_c5-1/0all/frames'

